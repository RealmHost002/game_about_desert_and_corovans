[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[ext_resource path="res://noise.tres" type="Texture" id=1]
[ext_resource path="res://trash textures/Sand-Textures.jpg" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal;
uniform sampler2D texture_height;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform float texelMaxHeight;
uniform float eps = 0.001;
uniform float height_mdfy;

float rand(vec2 co){
	return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 getNormal(vec2 uv) {
  
  float u = texture(texture_height, uv + vec2(0.0, -eps)).r * texelMaxHeight;
  float r = texture(texture_height, uv + vec2(eps, 0.0)).r * texelMaxHeight;
  float l = texture(texture_height, uv + vec2(-eps, 0.0)).r * texelMaxHeight;
  float d = texture(texture_height, uv + vec2(0.0, eps)).r * texelMaxHeight;
  
  vec3 n;
  n.z = u - d;
  n.x = l - r;
  n.y = 2.0;
  return normalize(n);
}


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
//	UV.x += TIME / 10.0;
//	UV.y += TIME / 15.0;
	VERTEX.y += texture(texture_height,UV).r * height_mdfy;
	NORMAL = getNormal(UV);
}




void fragment() {
	vec2 base_uv = UV * 10.0;
//	vec4 albedo_tex = texture(texture_albedo,base_uv);
	float a = rand(ceil(UV * 10.0));
	base_uv *= mat2(vec2(cos(a), -sin(a)), vec2(sin(a), cos(a)));
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
//	NORMALMAP = texture(texture_normal,base_uv).rgb;
//	NORMALMAP_DEPTH = normal_scale;
}







"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 1.0
shader_param/metallic = 0.337
shader_param/roughness = 0.882
shader_param/point_size = 0.0
shader_param/normal_scale = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texelMaxHeight = 11.799
shader_param/eps = 0.01
shader_param/height_mdfy = 3.0
shader_param/texture_albedo = ExtResource( 2 )
shader_param/texture_height = ExtResource( 1 )
